@import "form-constant";

@function transY($height, $dist) {
  @return -($height * .5 + $dist);
}

@mixin smart-flex(
    $direction: row-reverse,
    $justify: space-between,
    $align: center) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
}

@mixin smart-form-size($width: 80%, $max-width: 800px, $height: auto) {
  width: $width;
  max-width: $max-width;
  height: $height;
}

@mixin smart-form($direction: column, $width: 80%, $margin: auto) {
  @include smart-flex($direction, $justify: flex-start, $align: null);
  @include smart-form-size($width);
  margin: $margin;
}

@mixin dirty-label($translate, $font-size) {
  font-size: $font-size;
  transform: translateY($translate);
}

@mixin error-msg($args: ()) {
  $default: (
    color: $error-color,
    left: 1.5rem,
    bottom: 0,
    font-size: .9rem
  );
  $argsMap: map-merge($default, $args);
  position: absolute;
  left: map-get($argsMap, left);
  bottom: map-get($argsMap, bottom);
  color: map-get($argsMap, color);
  font-size: map-get($argsMap, font-size);
}

@mixin box-shadow($args: ()) {
  $default: (
    size: 0 1px 1px 1px,
    inset: false,
    color: gray,
  );
  $argsMap: map_merge($default, $args);
  $inset: map_get($argsMap, inset);
  $size: map_get($argsMap, size);
  $color: map_get($argsMap, color);
  $box-shadow: $size $color !default;
  @if($inset) {
    $box-shadow: $size $color inset !global;
  }
  box-shadow: $box-shadow;
  &:-webkit-autofill {
    transition: background 0s 100000000000s;
  }
}

@mixin smart-input_likeplaceholder-transform ($args: ()) {
  $defaultValues: (
    height: $height-input,
    ratio: .5,
    left: 1.5rem,
    top: false,
    translateY: .7rem,
    label-resize: .3rem,
    z-index: 10,
    transition: all .3s,
    left-underlined: .5rem
  );
  $argsMap: map-merge($defaultValues, $args);
  @debug $argsMap;
  $top: map-get($argsMap, top);
  $height: map-get($argsMap, height);
  $font-size: $height * map-get($argsMap, ratio);
  $transY: transY(map-get($argsMap, height), map-get($argsMap, translateY));
  $resize: map-get($argsMap, label-resize);
  @debug $resize; 
  $font-top: calc(#{$font-size} - #{$resize});
  &.like-placeholder {
    .smart-input__label {
      font-size: $font-size;
      position: absolute;
      z-index: map_get($argsMap, z-index) - 1;
      left: map-get($argsMap, left);
      @if $top {
        top: $top;
      } @else {
        top: 50%;
        transform: translateY(-50%);
      }
      transition: map-get($argsMap, transition);
      &.dirty-input {
        font-size: $font-top;
        @include dirty-label($transY, $font-top);
        z-index: map_get($argsMap, z-index);
      }
    }
    .smart-input__input {
      height: $height;
      transition: $transition;
      z-index: map_get($argsMap, z-index);
      &::placeholder {
        opacity: 0;
      }
      &:focus {
        &::placeholder {
          opacity: 1;
        }
        & + .smart-input__label {
          @include dirty-label($transY, $font-top);
          z-index: map_get($argsMap, z-index);
        }
      }
    }
  }
  &.underlined {
    .smart-input__label {
      left: map-get($argsMap, left-underlined);
    }
  }
  &:not(.shadowed) {
    .smart-input__input {
      &:hover:-webkit-autofill,
      &:focus:-webkit-autofill,
      &:-webkit-autofill {
        transition: background 0s 100000000s;
      }
    }
  }
}

@mixin smart-input_likeplaceholder-padding($args: ()) {
  $default: (
    padding: 1rem .5rem,
    border-resize: 1px,
    input-padding: 1rem,
    width: 100%
  );
  $argsMap: map-merge($default, $args);
  $padding: map-get($argsMap, padding);
  &.like-placeholder {
    padding: $padding;
    .smart-input__input {
      box-sizing: border-box;
      width: map-get($argsMap, width);
      padding: map-get($argsMap, input-padding);
      &:hover,
      &:focus,
      &.invalid-input {
        $input-padding: map-get($argsMap, input-padding);
        $padding-top: nth($input-padding, 1);
        $resize: map-get($argsMap, border-resize);
        @if length($input-padding) > 3 {
          $padding-bottom: nth($input-padding, 4);
          $padding-right: calc(#{nth($input-padding, 2)} - #{$resize});
          $padding-left: calc(#{nth($input-padding, 4)} - #{$resize});
          padding: $padding-top $padding-right nth($input-padding, 3) $padding-left;
        } @else if length($input-padding) > 1 {
          $padding-left: calc(#{nth($input-padding, 2)} - #{$resize});
          padding: $padding-top $padding-left;
        } @else {
          padding: $padding-top calc(#{$padding-top} - #{$resize});
        }
      }
    }
  }
  
}

@mixin smart-input_likeplaceholder-background($args: ()) {
  $default: (
    background: #fff,
    label-color: #999,
    label-padding: 2px,
  );
  $argsMap: map_merge($default, $args);
  background: map_get($argsMap, background);
  &.like-placeholder {
    .smart-input__input {
      background: transparent;
    }
    .smart-input__label {
      color: map_get($argsMap, label-color);
      background: map_get($argsMap, background);
      padding:map_get($argsMap, label-padding);
      border-radius: 2px;
    }
  }
}

@mixin smart-input__border-color( $case, $color, $width, $shadow-size: 0 1px 1px 1px) {
  @if($case == 'main') {
    &.underlined .smart-input__input{
      border: $width solid transparent;
      border-bottom-color: $color;
    }
    &.outlined .smart-input__input{
      border: $width solid $color;
    }
    &.shadowed .smart-input__input{
      @include box-shadow((color: $color, size: $shadow-size));
    }
  } 
  @else if($case == 'hover') {
    &.underlined .smart-input__input:hover {
      border: $width solid transparent;
      border-bottom-color: $color;
    }
    &.outlined .smart-input__input:hover{
      border: $width solid $color;
    }
    &.shadowed .smart-input__input:hover{
      @include box-shadow((color: $color, size: $shadow-size));
    }
    &.like-placeholder {
      .smart-input__input:hover + .smart-input__label {
        color: $color;
      }
    }
  }
  @else if($case == 'focus') {
    &.underlined .smart-input__input:focus {
      border: $width solid transparent;
      border-bottom-color: $color;
    }
    &.outlined .smart-input__input:focus{
      border: $width solid $color;
    }
    &.shadowed .smart-input__input:focus{
      @include box-shadow((color: $color, size: $shadow-size));
    }
    &.like-placeholder {
      .smart-input__input:focus + .smart-input__label {
        color: $color;
      }
    }
  }
  @else if($case == 'error') {
    &.invalid-input {
      @debug $color;
      &.underlined .smart-input__input {
      border: $width solid transparent;
      border-bottom-color: $color;
      }
      &.outlined .smart-input__input{
        border: $width solid $color;
      }
      &.shadowed .smart-input__input{
        @include box-shadow((color: $color, size: $shadow-size));
      }
      &.like-placeholder {
        .smart-input__label {
          @debug $color;
          color: $color;
        }
        .smart-input__input:hover + .smart-input__label,
        .smart-input__input:focus + .smart-input__label {
          color: $color;
        }
      }
    }
  }
}

@mixin smart-input_input-border-rad($border-rad: 5px) {
  &:not(.underlined) {
    .smart-input__input {
      border-radius: $border-rad;
    }
  }
  &.underlined {
    .smart-input__input {
      border-radius: $border-rad $border-rad 0 0;
    }
  }
}

@mixin smart-input_border-colors($args: ()) {
  $default: (
    main: nth($input-colors, 1),
    hover: nth($input-colors, 2),
    focus: nth($input-colors, 3),
    error: nth($input-colors, 4),
    border-main: 1px,
    border-hover: 2px,
    shadow-size: 0 1px 1px 1px,
    debug: false
  );
  $argsMap: map_merge($default, $args);
  @if map_get($argsMap, debug) {
    @debug $argsMap;
  }
  $color-main: map_get($argsMap, main);
  $color-hover: map_get($argsMap, hover);
  $color-focus: map_get($argsMap, focus);
  $color-error: map_get($argsMap, error);
  $border-main: map_get($argsMap, border-main);
  $border-hover: map_get($argsMap, border-hover);
  $shadow-size: map_get($argsMap, shadow-size);
  @include smart-input__border-color('main', $color-main, $border-main, $shadow-size);
  @include smart-input__border-color('hover', $color-hover, $border-hover, $shadow-size);
  @include smart-input__border-color('focus', $color-focus, $border-hover, $shadow-size);
  @include smart-input__border-color('error', $color-error, $border-hover, $shadow-size);
}

@mixin check-input($args: ()) {
  $default: (
    width: auto,
    min-width: unset,
    padding: 0 1rem 0 0,
    margin: .2rem,
    font-size: inherit,
    input-height: auto,
    input-margin: 0 .5rem,
    direction: row,
    justify: flex-start,
    aling: center
  );
  $argsMap: map-merge($default, $args);
  &.check-input {
    display: block;
    @include smart-flex(map-get($argsMap, direction), map-get($argsMap, justify), map-get($argsMap, aling));
    width: map-get($argsMap, width);
    min-width: map-get($argsMap, min-width);
    padding: map-get($argsMap, padding);
    .smart-input__label {
      display: block;
      font-size: map-get($argsMap, font-size);
    }
    .smart-input__input {
      display: block;
      height: map-get($argsMap, input-height);
      margin: map-get($argsMap, input-margin);
    }
  } 
}

@mixin smart-input_in-row($args: ()) {
  $default: (
    width: auto,
    padding: 0,
    margin: 0,
    font-size: inherit,
    input-height: inherit,
    input-margin: 0 .5rem,
    direction: row-reverse,
    justify: flex-start,
    aling: center
  );
  $argsMap: map-merge($default, $args);
  &.in-row {
    @include smart-flex(map-get($argsMap, direction), map-get($argsMap, justify), map-get($argsMap, aling));
    width: map-get($argsMap, width);
    padding: map-get($argsMap, padding);
    .smart-input__label {
      font-size: map-get($argsMap, font-size);
    }
    .smart-input__input {
      display: block;
      height: map-get($argsMap, input-height);
      margin: map-get($argsMap, input-margin);
    }
  }
}

@mixin smart-input_in-col($args: ()) {
  $default: (
    width: auto,
    font-size: inherit,
    padding: inherit,
    label-margin: 0 0 .5rem 0,
    input-height: inherit,
    input-margin: 0 .5rem 0,
    direction: column,
    justify: flex-start,
    aling: flex-start
  );
  $argsMap: map-merge($default, $args);
  &.in-col {
    @include smart-flex(map-get($argsMap, direction), map-get($argsMap, justify), map-get($argsMap, aling));
    width: map-get($argsMap, width);
    padding: map-get($argsMap, padding);
    .smart-input__label {
      font-size: map-get($argsMap, font-size);
      margin: map-get($argsMap, label-margin);
    }
    .smart-input__input {
      display: block;
      height: map-get($argsMap, input-height);
      margin: map-get($argsMap, input-margin);
    }
  }
}

@mixin smart-input($args: ()) {
  $default: (
    border-box: border-box,
    outline: none,
    margin: 0 0 1rem 0
  );
  $argsMap: map-merge($default, $args);
  position: relative;
  margin: map-get($argsMap, margin);
  .smart-input__error-wrapper {
    position: relative;
  }
  @include smart-flex();
  @include smart-input_likeplaceholder-transform();
  @include smart-input_likeplaceholder-background();
  @include smart-input_likeplaceholder-padding();
  @include smart-input_input-border-rad();
  @include smart-input_border-colors();
  @include smart-input_in-col();
  @include smart-input_in-row();
  .smart-input__input {
    outline: map-get($argsMap, outline);
    box-sizing: map-get($argsMap, border-box);
  }
  &:not(.shadowed) {
    .smart-input__input {
      &:hover:-webkit-autofill,
      &:focus:-webkit-autofill,
      &:-webkit-autofill {
        transition: background 0s 100000000s;
      }
    }
  }
}

@mixin button-size($args: ()) {
  $default: (
    font: $font-btn,
    padding: $btn-padding,
    size: 2.6rem 1rem,
    margin:.5rem,
    outline: none,
    border-radius: 5px,
    color: #fff,
    align-self: center,
    justify-self: center,
    transition: all .3s,
    border: solid 1px transparent
  );
  $argsMap: map-merge($default, $args);
  font: map-get($argsMap, font);
  @include smart-flex(row, center, center);
  padding: map-get($argsMap, padding);
  min-height: nth(map-get($argsMap, size), 1);
  min-width: nth(map-get($argsMap, size), 2);
  box-sizing: border-box;
  border: map-get($argsMap, border);
  margin: map-get($argsMap, margin);
  border-radius: map-get($argsMap, border-radius);
  outline: map-get($argsMap, outline);
  color: map-get($argsMap, color);
  align-self: map-get($argsMap, align-self);
  justify-self: map-get($argsMap, justify-self);
  transition: map-get($argsMap, transition);
  &-small {
    font-size: 1rem;
    min-height: 2rem;
  }
  &-large {
    min-height: 3.5rem;
    padding: nth($btn-padding, 1) nth($btn-padding, 2) + .4rem;
    font-size: 1.6rem;
  }
  &-medium {
    min-height: 2.6rem;
  }
}

@mixin button-outlined ($color, $darken: 20%, $background: white, $border-width: 1px){
  border: $border-width solid $color;
  background: $background;
  color: $color;
  box-shadow: 0 0 1px 1px darken($color, $darken);
  &:hover:not([disabled]) {
    box-shadow: 1px 1px 1px 1px darken($color, $darken);
  }
  &:active:not([disabled]) {
    box-shadow: inset 1px 1px 1px 1px darken($color, $darken);
  }
  &[disabled] {
    @extend %disable;
  }
}

@mixin button-label($color, $darken: 20%, $background: transparent) {
  background: $background;
  border: none;
  color: $color;
  transition: background ease-out .4s;
  &:hover:not([disabled]),
  &:focus:not([disabled]) {
    background-image: linear-gradient(to left, $color, darken($color, 15%));
    -webkit-text-fill-color: transparent;
    -webkit-background-clip: text;
  }
  &:active:not([disabled]) {
    background-image: linear-gradient(to left $color, $color, darken($color, 15%), darken($color, 15%), darken($color, 15%));
    background-size: 500% 100%;
    background-position: 100% 0;
    -webkit-text-fill-color: transparent;
    -webkit-background-clip: text;
  }
  &[disabled] {
    @extend %disable;
  }
}

@mixin button-filled ($color, $darken: 20%, $background: white, $border-width: 1px){
  background-color: $color;
  background-size: 75% 100%;
  background-position: 50% 0;
  color: white;
  &:hover:not([disabled]),
  &:focus:not([disabled]) {
    background-color: darken($color, 10%);
  }
  &:active:not([disabled]) {
    background-image: linear-gradient(to left, darken($color, 15%), darken($color, 15%), darken($color, 15%), $color, $color, darken($color, 15%), darken($color, 15%), darken($color, 15%));
    background-size: 900% 100%;
    background-position: 50% 0;
    transition: background ease-out .4s;
  }
  &[disabled] {
    @extend %disable;
  }
}

@mixin reset-input($margin: 0, $padding: 0, $width: auto, $height: inherit, $justify: flex-start, $align: flex-start) {
  display: block;
  justify-content: $justify;
  padding: $padding;
  width: $width;
  height: $height;
  margin: $margin;
  align-self: $align;
}

@mixin disable($gradient: linear-gradient(to left, $disable-filter, $disable-filter)) {
  background-image: $gradient;
  border-color: gray;
  cursor: none;
  color: #fff;
}

%disable {
  background-image: linear-gradient(to left,
      $disable-filter,
      $disable-filter);
  border-color: gray;
}
