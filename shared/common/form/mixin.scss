@import "form-constant";

@function transY($height, $dist) {
  @return -($height * .5 + $dist);
}

@mixin smart-form-size($width: 80%, $max-width: 800px, $height: auto) {
  width: $width;
  max-width: $max-width;
  height: $height;
}

@mixin smart-form-flex($direction: column, $justify: flex-start) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
}

@mixin smart-form($direction: column, $width: 80%, $margin: auto) {
  @include smart-form-flex($direction);
  @include smart-form-size($width);
  margin: $margin;
}

@mixin smart-input_flex(
    $direction: row-reverse,
    $justify: space-between,
    $align: center) {
  @include smart-form-flex($direction, $justify);
  align-items: $align;
}

@mixin dirty-label($translate, $font-size) {
  font-size: $font-size;
  transform: translateY($translate);
}


@mixin smart-input_likeplaceholder-transform ($args: ()) {
  $defaultValues: (
    height: $height-input,
    ratio: .5,
    left: 1.5rem,
    top: false,
    translateY: .7rem,
    label-resize: .3rem,
    z-index: 10,
    transition: all .3s
  );
  $argsMap: map-merge($defaultValues, $args);
  @debug $argsMap;
  $top: map-get($argsMap, top);
  $height: map-get($argsMap, height);
  $font-size: $height * map-get($argsMap, ratio);
  $transY: transY(map-get($argsMap, height), map-get($argsMap, translateY));
  $resize: map-get($argsMap, label-resize);
  @debug $resize; 
  $font-top: calc(#{$font-size} - #{$resize});
 
  .smart-input__label {
    font-size: $font-size;
    position: absolute;
    z-index: map_get($argsMap, z-index) - 1;
    left: map-get($argsMap, left);
    @if $top {
      top: $top;
    } @else {
      top: 50%;
      transform: translateY(-50%);
    }
    transition: map-get($argsMap, transition);
    &.dirty-input {
      font-size: $font-top;
      @include dirty-label($transY, $font-top);
      z-index: map_get($argsMap, z-index);
    }
  }
  .smart-input__input {
    height: $height;
    transition: $transition;
    z-index: map_get($argsMap, z-index);
    &::placeholder {
      opacity: 0;
    }
    &:focus {
      &::placeholder {
        opacity: 1;
      }
      & + .smart-input__label {
        @include dirty-label($transY, $font-top);
      }
    }
  }
  &:not(.shadowed) {
    .smart-input__input {
      &:-webkit-autofill {
        transition: background 0s 100000000s;
      }
    }
  }
}

@mixin smart-input_input-padding(
    $padding: 1rem .5rem,
    $border-resize: 1px
  ) {
  .smart-input__input {
    padding: $padding;
  }
  &.like-placeholder {
    .smart-input__input {
      &:hover,
      &:focus,
      &.invalid-input {
        @if length($padding) > 1 {
          padding: nth($padding, 1) calc(nth($padding, 2) - #{$border-resize});
        } @else {
          padding: nth($padding, 1) calc(nth($padding, 1) - #{$border-resize});
        }
      }
    }
  }
}

@mixin smart-input_input-border-rad($border-rad: 5px) {
  &:not(.underlined) {
    .smart-input__input {
      border-radius: $border-rad;
    }
  }
  &.underlined {
    .smart-input__input {
      border-radius: $border-rad $border-rad 0 0;
    }
  }
}

@mixin smart-input_likeplaceholder-background($args: ()) {
  $default: (
    background: #fff,
    label-color: #aaa,
    label-hadding: 2px
  );
  $argsMap: map_merge($default, $args);
  background: map_get($argsMap, background);
  .smart-input__input {
    background: transparent;
  }
  .smart-input__label {
    color: map_get($argsMap, color);
    background: map_get($argsMap, background);
    padding:map_get($argsMap, label-padding);
    border-radius: 2px;
  }
}

@mixin box-shadow($args: ()) {
  $default: (
          size: 0 1px 1px 1px,
          inset: false,
          color: gray,
  );
  $argsMap: map_merge($default, $args);
  $inset: map_get($argsMap, inset);
  $size: map_get($argsMap, size);
  $color: map_get($argsMap, color);
  $box-shadow: $size $color !default;
  @if($inset) {
    $box-shadow: $size $color inset !global;
  }
  box-shadow: $box-shadow;
  &:-webkit-autofill {
    transition: background 0s 100000000000s;
  }
}

@mixin smart-input__border-color( $case, $color, $width, $shadow-size: 0 1px 1px 1px) {
  @debug $color;
  @if($case == 'main') {
    &.underlined .smart-input__input{
    border: $width solid transparent;
    border-bottom-color: $color;
    }
    &.outlined .smart-input__input{
      border: $width solid $color;
    }
    &.shadowed .smart-input__input{
      @include box-shadow((color: $color, size: $shadow-size));
    }
  } 
  @if($case == 'hover') {
    &.underlined .smart-input__input:hover {
      border: $width solid transparent;
      border-bottom-color: $color;
    }
    &.outlined .smart-input__input:hover{
      border: $width solid $color;
    }
    &.shadowed .smart-input__input:hover{
      @include box-shadow((color: $color, size: $shadow-size));
    }
    &.like-placeholder {
      .smart-input__input:hover + .smart-input__label {
        color: $color;
      }
    }
  }
  @if($case == 'focus') {
    @debug $color;
    &.underlined .smart-input__input:focus {
      border: $width solid transparent;
      border-bottom-color: $color;
    }
    &.outlined .smart-input__input:focus{
      border: $width solid $color;
    }
    &.shadowed .smart-input__input:focus{
      @include box-shadow((color: $color, size: $shadow-size));
    }
    &.like-placeholder {
      .smart-input__input:focus + .smart-input__label {
        color: $color;
      }
    }
  }
  @if($case == 'error') {
    &.invalid-input {
      &.underlined .smart-input__input {
      border: $width solid transparent;
      border-bottom-color: $color;
      }
      &.outlined .smart-input__input{
        border: $width solid $color;
      }
      &.shadowed .smart-input__input{
        @include box-shadow((color: $color, size: $shadow-size));
      }
      &.like-placeholder {
        .smart-input__label {
          color: $color;
        }
        .smart-input__input:hover + .smart-input__label,
        .smart-input__input:focus + .smart-input__label {
          color: $color;
        }
      }
    }
  }
}

@mixin smart-input_border-colors($args: (d: 6)) {
  $default: (
    main: nth($input-colors, 1),
    hover: nth($input-colors, 2),
    focus: nth($input-colors, 3),
    errror: nth($input-colors, 4),
    border-main: 1px,
    border-hover: 2px,
  );
  $argsMap: map_merge($default, $args);
  @include smart-input__border-color('main', map_get($argsMap, main), map_get($argsMap, border-main));
  @include smart-input__border-color('hover', map_get($argsMap, hover), map_get($argsMap, border-hover));
  @include smart-input__border-color('focus', map_get($argsMap, focus), map_get($argsMap, border-hover));
  @include smart-input__border-color('error', map_get($argsMap, error), map_get($argsMap, border-hover));
}

@mixin smart-input(
    $margin:  0 0 .5rem 0,
    $padding: 1rem .5rem) {
  position: relative;
  margin: $margin;
  box-sizing: border-box;
  .smart-input__error-wrapper {
    position: relative;
  }
  //@include smart-input_likeplaceholder-transform();

  &.like-placeholder {
    padding: $padding;
    .smart-input__input {
      width: 100%;
    }
  }
  .smart-input__input {
    z-index: 10;
    outline: none;
    box-sizing: border-box;
    border: none;
  }
  &:not(.shadowed) {
    .smart-input__input {
      &:-webkit-autofill {
        transition: background 0s 100000000s;
      }
    }
  }
}

@mixin smart-input-input-size(
    $border-rad: 5px,
    $padding: $input-padding-top $input-padding-left,
    $width: 100%,
    $height: $height-input) {
  width: $width;
  height: $height;
  padding: $padding;
  border-radius: $border-rad;
}

@mixin smart-input-input-color(
    $font-size: 1rem,
    $color: $text-color,
    $background: transparent,
    $transition: $transition) {
  font-size: $font-size;
  color: $color;
  transition: $transition;
}

@mixin smart-input-label($label-style: 'in-row', $font-size: 1.6rem, $width: 100%, $margin: 0 0 1rem 0) {
  font-size: $font-size;
  width: $width;
  @if($label-style == 'in-row') {
    margin: nth($margin, 1)
  }
  @else {
    margin: $margin;
  }
}

@mixin box-border($color, $input-style, $width: 2px) {
  @if($input-style == 'outlined') {
    border: solid $width $color;
  }
  @else {
    border-top: solid $width transparent;
    border-bottom: solid $width $color;
  }
}

@mixin error($input-style: 'outlined', $color: $error-color) {
  @if($input-style == 'shadowed') {
    &.error,
    &.error:hover,
    &.error:focus {
      border: none;
      @include box-shadow((color: $color));
    }
  }
  @else {
    &.error,
    &.error:hover,
    &.error:focus {
      @include box-border($input-style, $color, 2px);
    }
  }
}

@mixin input-border-style($input-style, $colors: $input-colors, $padding: $input-padding-top $input-padding-left) {
  @if($input-style == 'underlined'){
    @include box-border(nth($colors, 1), $input-style, 1px);
    &:hover {
      @include box-border(nth($colors, 2), $input-style);
    }
    &:focus {
      @include box-border(nth($colors, 3), $input-style);
    }
    &.invalid-input {
      @include box-border(nth($colors, 4), $input-style);
      padding: $padding;
    }
  }
  @else if($input-style == 'outlined') {
    @include box-border(nth($colors, 1), $input-style, 1px);
    &:hover {
      @include box-border(nth($colors, 2), $input-style);
      padding: nth($padding, 1) calc(#{nth($padding, 2)} - 1px);
    }
    &:focus {
      @include box-border(nth($colors, 3), $input-style);
      padding: nth($padding, 1) calc(#{nth($padding, 2)} - 1px);
    }
    &.invalid-input {
      @include box-border(nth($colors, 4), $input-style);
      padding: nth($padding, 1) calc(#{nth($padding, 2)} - 1px);
    }
  }
  @else if($input-style == 'shadowed') {
    border: none;
    @include box-shadow((color: nth($colors, 1), size: 0 0 1px 1px));
    &:hover {
      border: none;
      $color: nth($colors, 2);
      @include box-shadow((color: $color));
    }
    &:focus {
      border: none;
      @include box-shadow((color: nth($colors, 3)));
    }
    &.invalid-input {
      border: none;
      @include box-shadow((color: nth($colors, 4)));
    }
  }
}

@mixin error-msg($color: $error-color, $left: 1.5rem, $bottom: 0, $font-size: .9rem) {
  position: absolute;
  left: $left;
  bottom: $bottom;
  color: $color;
  font-size: $font-size;
}

@mixin like-placeholder-label-colors($colors: $placeholder-color $error-color) {
  color: nth($colors, 1);
  &.invalid-input {
    color: nth($colors, 2);
  }
}

@mixin like-placeholder-label-position(
    $left: 1.5rem,
    $background: inherit,
    $transition: $transition,
    $padding: 1px 3px){
  left: $left;
  padding: $padding;
  background: $background;
  border-radius: 2px;
  transition: $transition;
}

@mixin like-placeholder-label-size(
    $font-size: 1.3rem,
    $resize: .3rem,
    $translate: .8rem,
    $input-height: $height-input) {
  $label-translate: $input-height * .5 + $translate;
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  font-size: $font-size;
  &.dirty-input {
    font-size: $font-size - $resize;
    transform: translateY(-$label-translate);
    z-index: 11;
  }
}

@mixin like-placeholder-label(
    $left: 1.5rem,
    $font-size: 1.3rem,
    $resize: .3rem,
    $translate: .8rem,
    $input-height: $height-input,
    $colors: $placeholder-color $error-color,
    $transition: $transition,
    $background: inherit,
    $padding: 1px 3px) {
  $label-translate: $input-height * .5 + $translate !default;
  background: $background;
  position: absolute;
  left: $left;
  top: 50%;
  transform: translateY(-50%);
  color: nth($colors, 1);
  padding: $padding;
  font-size: $font-size;
  border-radius: 2px;
  transition: $transition;
  &.invalid-input {
    color: nth($colors, 2);
  }
  &.dirty-input {
    font-size: $font-size - $resize;
    transform: translateY(-$label-translate);
    z-index: 11;
  }
}

@mixin like-placeholder-input-border(
    $border-rad: 5px,
    $input-style: 'underlined'){
  @if($input-style == 'underlined') {
    border-radius: $border-rad $border-rad 0 0;
  }
  @else {
    border-radius: $border-rad;
  }
}

@mixin like-placeholder-input(
    $input-style: 'underlined',
    $label-font-size: 1rem,
    $translate: .7rem,
    $colors: $input-colors,
    $height: $height-input,
    $border-rad: 5px,
    $width: 100%,
    $padding: $input-padding-top $input-padding-left,
    $background: transparent) {
  $label-translate: $height * .5 + $translate;
  background: $background;
  position: relative;
  height: $height;
  width: $width;
  &::placeholder {
    opacity: 0;
    z-index: 100;
  }
  &:focus {
    & + .smart-input__label {
      z-index: 11;
      font-size: $label-font-size;
      color: nth($colors, 3);
      transform: translateY(-#{$label-translate});
    }
    & + .smart-input__label.invalid-input {
      color: nth($colors, 4);
    }
    &::placeholder {
      opacity: 1;
    }
  }
  @include input-border-style($input-style, $colors, $padding);
  @if($input-style == 'underlined') {
    border-radius: $border-rad $border-rad 0 0;
  }
  @else {
    border-radius: $border-rad;
  }
  @include error(nth($colors, 4), $input-style)
}

@mixin button-size($font: $font-btn, $padding: $btn-padding, $size: 2.6rem 1rem, $margin: .5rem, $border-rad: 5px) {
  font: $font;
  display: flex;
  justify-content: center;
  align-items: center;
  padding: $padding;
  min-height: nth($size, 1);
  min-width: nth($size, 2);
  box-sizing: border-box;
  border: solid 1px transparent;
  margin: $margin;
  border-radius: $border-rad;
  outline: none;
  color: #fff;
  align-self: center;
  justify-self: center;
  transition: all .3s;
  &-small {
    font-size: 1rem;
    min-height: 2rem;
  }
  &-large {
    min-height: 3.5rem;
    padding: nth($btn-padding, 1) nth($btn-padding, 2) + .4rem;
    font-size: 1.6rem;
  }
  &-medium {
    min-height: 2.6rem;
  }
}

@mixin button-outlined ($color, $darken: 20%, $background: white, $border-width: 1px){
  border: $border-width solid $color;
  background: $background;
  color: $color;
  box-shadow: 0 0 1px 1px darken($color, $darken);
  &:hover:not([disabled]) {
    box-shadow: 1px 1px 1px 1px darken($color, $darken);
  }
  &:active:not([disabled]) {
    box-shadow: inset 1px 1px 1px 1px darken($color, $darken);
  }
  &[disabled] {
    @extend %disable;
  }
}

@mixin button-label($color, $darken: 20%, $background: transparent) {
  background: $background;
  border: none;
  color: $color;
  -webkit-text-fill-color: transparent;
  -webkit-background-clip: text;
  &:hover:not([disabled]),
  &:focus:not([disabled]) {
    background-image: linear-gradient(to left, $color, darken($color, 15%));
  }
  &:active:not([disabled]) {
    background-image: linear-gradient(to left $color, $color, darken($color, 15%), darken($color, 15%), darken($color, 15%));
    background-size: 500% 100%;
    background-position: 100% 0;
    transition: background ease-out .4s;
  }
  &[disabled] {
    @extend %disable;
  }
}

@mixin button-filled ($color, $darken: 20%, $background: white, $border-width: 1px){
  background-color: $color;
  background-size: 75% 100%;
  background-position: 50% 0;
  color: white;
  &:hover:not([disabled]),
  &:focus:not([disabled]) {
    background-color: darken($color, 10%);
  }
  &:active:not([disabled]) {
    background-image: linear-gradient(to left, darken($color, 15%), darken($color, 15%), darken($color, 15%), $color, $color, darken($color, 15%), darken($color, 15%), darken($color, 15%));
    background-size: 900% 100%;
    background-position: 50% 0;
    transition: background ease-out .4s;
  }
  &[disabled] {
    @extend %disable;
  }
}

@mixin reset-input($margin: 0, $padding: 0, $width: auto, $height: inherit, $justify: flex-start, $align: flex-start) {
  display: block;
  justify-content: $justify;
  padding: $padding;
  width: $width;
  height: $height;
  margin: $margin;
  align-self: $align;
}

@mixin check-input-label() {

}

@mixin check-input(
    $field-width: auto,
    $field-padding: 0  1rem 0 0,
    $font-size: inherit,
    $input-height: auto,
    $input-margin: 0 .5rem) {
  width: $field-width;
  padding: $field-padding;
  .smart-input__label,
  .smart-input__input {
    display: block;
    font-size: $font-size;
    height: $input-height;
    margin: $input-margin;
  }
  input {
    margin: .5rem;
  }
}

%disable {
  background-image: linear-gradient(to left,
      $disable-filter,
      $disable-filter);
}
